package Controller;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.rmi.Naming;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import javax.swing.JComboBox;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;

import Interface.MainInterface;
import Model.ModelAuthor;
import Model.ModelBook;
import Model.ModelBorrowDetail;
import Model.ModelStudent;
import MyClass.GetAttribute;
import MyClass.StringController;
import main.ClientMainFrame;

class CreateTable implements Serializable {
	private ClientMainFrame clientMainFrame;
	public JScrollPane jScrollPane;

	public CreateTable() {
	}

	public CreateTable(ClientMainFrame clientMainFrame) {
		this.clientMainFrame = clientMainFrame;
	}

	public void setTable(String[][] row, String[] column, String currentTable, ClientMainFrame clientMainFrame) {
		JTable jTable = new JTable(row, column);
		jTable.setFont(new Font("Tahoma", 0, 18));
		// Cho phép sắp xếp
		jTable.setAutoCreateRowSorter(true);
		jTable.setEnabled(false);
		// Chỉnh chiều dài của hàng
		jTable.setRowHeight(30);
		jTable.getTableHeader().setFont(new Font("Tahoma", 1, 18));

		JPopupMenu popupMenu = new JPopupMenu("Tùy chọn");
		JMenuItem jMenuItemAdd = new JMenuItem("Thêm");
		popupMenu.add(jMenuItemAdd);
		JMenuItem jMenuItemDelete = new JMenuItem("Xóa");
		popupMenu.add(jMenuItemDelete);
		JMenuItem jMenuItemUpdate = new JMenuItem("Chỉnh sửa");
		popupMenu.add(jMenuItemUpdate);
		JSeparator separator = new JSeparator();
		popupMenu.add(separator);
		JMenuItem jMenuItemRefresh = new JMenuItem("Tải lại");
		popupMenu.add(jMenuItemRefresh);

		jScrollPane = new JScrollPane(jTable);
		jScrollPane.setPreferredSize(new Dimension(500, 300));

		this.jScrollPane.add(popupMenu);
		// Đầu tiên xóa tất cả thành phần trong panelCenter
		clientMainFrame.panelCenter.removeAll();
		// Sau đó tạo bảng mới trong panelCenter
		clientMainFrame.panelCenter.add(jScrollPane, BorderLayout.CENTER);
		// Cập nhật lại giao diện trong panelCenter
		clientMainFrame.panelCenter.revalidate();
		// Vẽ bảng mới trong panelCenter
		clientMainFrame.panelCenter.repaint();

		setupPopupMenu(jTable, popupMenu);
		// Xử lý sự kiện cho nút thêm trong popupmenu
		jMenuItemAdd.addActionListener(e -> {
			new MainController().showwingInput(currentTable);
		});

		jMenuItemDelete.addActionListener(e -> {
			new MainController().deletingRecord(currentTable);
		});

		jMenuItemUpdate.addActionListener(e -> {
			new MainController().updatingRecord(currentTable);
		});
		jMenuItemRefresh.addActionListener(e -> {
			new MainController().controllerPeform(clientMainFrame, currentTable);
		});

		clientMainFrame.comboBoxSearching.removeAllItems();
		if (this.clientMainFrame.start) {
			this.clientMainFrame.comboBoxNameTable.removeAllItems();
			String[] tableAvilable = { "Sách", "Tác giả", "Sinh viên", "Chi tiết mượn" };
			this.clientMainFrame.comboBoxNameTable = new JComboBox<String>(tableAvilable);
			this.clientMainFrame.comboBoxNameTable.setFont(new Font("Tahoma", Font.PLAIN, 18));
			this.clientMainFrame.horizontalBoxTable.removeAll();
			this.clientMainFrame.horizontalBoxTable.add(this.clientMainFrame.comboBoxNameTable);
			this.clientMainFrame.comboBoxNameTable.addItemListener(this.clientMainFrame.itemListenerServer);
		}
		// Nhập id của current table vào comboboxSearch
		String[] listId = StringController.StringArraySort(GetAttribute.getId(currentTable));
		this.clientMainFrame.comboBoxSearching.addItem("Tìm kiếm " + currentTable);
		for (String id : listId) {
			this.clientMainFrame.comboBoxSearching.addItem(id);
		}
		System.out.println("Đã tạo bảng thành công\n");
		System.out.println("===============================");
	}

	public void setupPopupMenu(JTable table, JPopupMenu popupMenu) {
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				super.mouseClicked(e);
				if (e.getButton() == MouseEvent.BUTTON3)
					popupMenu.show(table, e.getX(), e.getY());
			}
		});
	}

	public void getListAuthor(ClientMainFrame clientMainFrame, ArrayList<Object> list) {
		try {

			// In danh sách tác giả
			ArrayList<ModelAuthor> listAuthor = new ArrayList<ModelAuthor>();

			for (Object object : list) {
				ModelAuthor modelAuthor = (ModelAuthor) object;
				listAuthor.add(modelAuthor);
			}

//			String[] column = { "Mã tác giả", "Tên tác giả", "Quốc gia", "Tuổi", "Số điện thoại" };
			// Tạo bảng với hàng = kích cỡ của list và có 5 trường dữ liệu
			String[][] row = new String[listAuthor.size()][5];
			String[] column = { "Mã tác giả", "Tên tác giả", "Quốc gia" };
			int count = 0;
			// Lấy từng dòng trong list (for-each)
			for (Object object : list) {
				ModelAuthor author = (ModelAuthor) object;
				row[count][0] = author.getId();
				row[count][1] = author.getName();
				row[count][2] = author.getCountry();
				count++;
			}
			// Tiến hành hiển thị table Author
			setTable(row, column, "Author", clientMainFrame);
			String currentTable = "Author";
			this.clientMainFrame.tableChosen = currentTable;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}

	public void getListStudent(ClientMainFrame clientMainFrame) {
		try {
			MainInterface mainInterface = (MainInterface) Naming.lookup("rmi://localhost:1026/test");

			ArrayList<ModelStudent> listStudent = new ArrayList<ModelStudent>();
			ArrayList<Object> list = mainInterface.printList(clientMainFrame.tableChosen);
			for (Object object : list) {
				ModelStudent modelStudent = (ModelStudent) object;
				listStudent.add(modelStudent);
			}

			String[][] row = new String[listStudent.size()][3];
			String[] column = { "Mã sinh viên", "Tên sinh viên", "Ngành học" };
			int count = 0;
			// Lấy từng dòng trong list (for-each)
			for (Object object : list) {
				ModelStudent modelStudent = (ModelStudent) object;
				row[count][0] = modelStudent.getId();
				row[count][1] = modelStudent.getName();
				row[count][2] = modelStudent.getSpecialized();
				count++;
			}
			System.out.println("Đã lấy dữ liệu thành công");
			setTable(row, column, "Student", clientMainFrame);
			String currentTable = "Student";
			this.clientMainFrame.tableChosen = currentTable;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}

	public void getListBook(ClientMainFrame clientMainFrame) {
		try {
			MainInterface mainInterface = (MainInterface) Naming.lookup("rmi://localhost:1026/test");
			ArrayList<ModelBook> listBook = new ArrayList<ModelBook>();
			ArrayList<Object> list = mainInterface.printList(clientMainFrame.tableChosen);
			for (Object object : list) {
				ModelBook modelBook = (ModelBook) object;
				listBook.add(modelBook);
			}

			String[][] row = new String[listBook.size()][3];
			String[] column = { "Mã sách", "Tên sách", "Thể loại sách" };
			int count = 0;
			// Lấy từng dòng trong list (for-each)
			for (Object object : list) {
				ModelBook modelBook = (ModelBook) object;
				row[count][0] = modelBook.getIdBook();
				row[count][1] = modelBook.getNameBook();
				row[count][2] = modelBook.getKindOfBook();
				count++;
			}
			System.out.println("Đã lấy dữ liệu thành công");
			setTable(row, column, "Book", clientMainFrame);
			this.clientMainFrame.tableChosen = "Book";
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}

	public void getListBorrow(ClientMainFrame clientMainFrame) {
		try {
			MainInterface mainInterface = (MainInterface) Naming.lookup("rmi://localhost:1026/test");
			Calendar currentDate = Calendar.getInstance();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			ArrayList<ModelBorrowDetail> listBorrowDetail = new ArrayList<ModelBorrowDetail>();
			ArrayList<Object> list = mainInterface.printList(clientMainFrame.tableChosen);
			for (Object object : list) {
				ModelBorrowDetail modelBorrowDetail = (ModelBorrowDetail) object;
				Date returnDate = Date.valueOf(modelBorrowDetail.getReturnDay().toLocalDate().plusDays(7));
				// Nếu thẻ mượn ở trạng thái đã trả và đã trả được 7 ngày kể từ lúc trả sách thì
				// sẽ xóa thẻ mượn ra khỏi danh sách
				if (modelBorrowDetail.getReturnStatus().equals("Đã trả")
						&& df.format(currentDate.getTime()).compareTo(df.format(returnDate)) >= 0) {
					mainInterface.remove(modelBorrowDetail, "Borrow");
				} else {
					listBorrowDetail.add(modelBorrowDetail);
				}

			}

			String[][] row = new String[listBorrowDetail.size()][3];
			String[] column = { "Mã mượn", "Mã sách", "Mã sinh viên" };
			int count = 0;
			// Lấy từng dòng trong list (for-each)

			for (ModelBorrowDetail model : listBorrowDetail) {
				row[count][0] = model.getBorrowID();
				row[count][1] = model.getBookID();
				row[count][2] = model.getStudentID();
				count++;
			}
			System.out.println("Đã lấy dữ liệu thành công");
			setTable(row, column, "Borrow", clientMainFrame);
			this.clientMainFrame.tableChosen = "Borrow";
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
}
