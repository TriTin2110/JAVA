package MyClass;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import org.jdatepicker.impl.JDatePickerImpl;

import Implements.ConnectionMuonTraSach;

public class GetAttribute {
	public static Date getDate(JDatePickerImpl jDatePickerImpl) {
		int day = jDatePickerImpl.getModel().getDay();
		int month = jDatePickerImpl.getModel().getMonth();
		int year = jDatePickerImpl.getModel().getYear();
		@SuppressWarnings("deprecation")
		Date date = new Date(year - 1900, month, day);
		return date;
	}

	public static String[] getAuthorID() {
		String[] result = null;
		try {
			Connection connection = ConnectionMuonTraSach.getConnection();
			Statement statement = connection.createStatement();
			// Lấy số dòng của bảng author
			ResultSet resultSet = statement.executeQuery("select count(*) from author");
			int count = (resultSet.next()) ? resultSet.getInt(1) : 0;
			// Tạo mảng string với độ lớn = số dòng đã lấy
			result = new String[count];

			count = 0;

			String sql = "select id_author from author";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				result[count] = resultSet.getString("id_author");
				count++;
			}

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return StringController.StringArraySort(result);
	}

	// Lấy số lượng sách hiện có
	public static int getBookCount() {
		int result = 0;
		try {
			Connection connection = ConnectionMuonTraSach.getConnection();
			String sql = "select count(*) from book";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next())
				result = resultSet.getInt(1);
			ConnectionMuonTraSach.closeConnection(connection);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return result;
	}

	public static ArrayList<String> getBookId() {
		ArrayList<String> list = new ArrayList<String>();
		try {
			Connection connection = ConnectionMuonTraSach.getConnection();
			String sql = "select id_book from book";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				list.add(resultSet.getString(1));
			}
			ConnectionMuonTraSach.closeConnection(connection);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return list;
	}

	public static int getStudentCount() {
		int result = 0;
		try {
			Connection connection = ConnectionMuonTraSach.getConnection();
			String sql = "select count(*) from student";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next())
				result = resultSet.getInt(1);
			ConnectionMuonTraSach.closeConnection(connection);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return result;
	}

	public static String[] getStudentId(String currentTable) {
		String[] income = new String[2];
		switch (currentTable) {
		case "Author":
			income[0] = "author";
			income[1] = "id_author";
			break;

		case "Student":
			income[0] = "student";
			income[1] = "id_student";
			break;

		case "Book":
			income[0] = "book";
			income[1] = "id_book";
			break;

		case "Borrow":
			income[0] = "BorrowDetail";
			income[1] = "id_borrow";
			break;
		}

		String[] result = null;
		try {
			Connection connection = ConnectionMuonTraSach.getConnection();
			String sql = "select count(*) from ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, income[0]);
			// Đếm số dòng trong record
			int line = preparedStatement.executeUpdate();
			result = new String[line];

			sql = "select ? from ?";
			preparedStatement.setString(1, income[1]);
			preparedStatement.setString(2, income[0]);

			ResultSet resultSet = preparedStatement.executeQuery();
			line = 0;
			while (resultSet.next()) {
				result[line] = resultSet.getString(1);
				line++;
			}
			ConnectionMuonTraSach.closeConnection(connection);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return result;
	}

	public static Date getBorrowDate(String id) {
		Date date = null;
		try {
			Connection connection = ConnectionMuonTraSach.getConnection();
			String sql = "select borrow_day from BorrowDetail where id_borrow = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, id);
			ResultSet resultSet = preparedStatement.executeQuery();
			resultSet.next();
			date = resultSet.getDate(1);
			ConnectionMuonTraSach.closeConnection(connection);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return date;
	}

}
